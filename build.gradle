/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.3.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}
repositories {
    mavenLocal()
    maven {
        url = uri('file:///Users/julienfumanti/Documents/bitbucket/ulegalizedrives/libs')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2')
    }
}
apply from: 'version.gradle'
apply plugin: 'io.spring.dependency-management'
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${cloudGcp}"
    }
}
group = 'com.ulegalize'
project.version = applicationVersion
description = 'ulegalizeDrive'
sourceCompatibility = '1.11'
dependencies {
    implementation "com.ulegalize:ulegalizeshare:${ulegalizeShare}"

    implementation 'com.eclipsesource.minimal-json:minimal-json:0.9.1'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-jersey'
    implementation ('org.springframework.boot:spring-boot-starter-web') {
        exclude group:'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    //    implementation 'org.slf4j:slf4j-jdk14:1.7.26'
    implementation "org.apache.jclouds.driver:jclouds-slf4j:${jclouds}"
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'

    compileOnly "org.projectlombok:lombok:${lombok}"
    annotationProcessor "org.projectlombok:lombok:${lombok}"
    testCompileOnly "org.projectlombok:lombok:${lombok}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok}"
    // loggin stuff
    compile 'org.springframework.cloud:spring-cloud-starter-sleuth'
    compile 'net.logstash.logback:logstash-logback-encoder:6.6'
    compile 'ch.qos.logback:logback-core:1.2.3'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'ch.qos.logback:logback-access:1.2.3'

    implementation 'org.springframework.cloud:spring-cloud-gcp-starter'
    implementation 'commons-io:commons-io:2.4'
    implementation "org.apache.commons:commons-lang3:${commonsLang}"

    implementation "com.fasterxml.jackson.core:jackson-core:${jackson}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jackson}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jackson}"
    implementation "com.fasterxml.jackson.module:jackson-module-parameter-names:${jackson}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jackson}"
    runtime group: 'com.fasterxml.jackson.module', name: 'jackson-modules-java8', version: "${jackson}"



    implementation 'com.dropbox.core:dropbox-core-sdk:3.1.1'
    implementation 'org.apache.cxf:cxf-spring-boot-starter-jaxws:3.4.2'
    implementation 'javax.xml.ws:jaxws-api:2.3.1'
    implementation "org.springframework.security.oauth:spring-security-oauth2:${springSecurityOauth}"
    compile files('./libs/org/nuxeo/lib/onedrive/onedrive-java-client/2.29/onedrive-java-client-2.29.jar')
//    implementation 'org.nuxeo.lib.onedrive:onedrive-java-client:2.29'
    implementation 'org.apache.jclouds.api:openstack-swift:2.2.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.3.RELEASE'
//    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    implementation "io.jsonwebtoken:jjwt-api:${jsonwebtoken}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jsonwebtoken}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jsonwebtoken}"

    // https://mvnrepository.com/artifact/com.auth0/java-jwt
    compile group: 'com.auth0', name: 'java-jwt', version: "${auth0JwtVersion}"
    implementation group: 'com.auth0', name: 'auth0', version: "${auth0Version}"
    implementation 'com.auth0:jwks-rsa:0.13.0'
}



publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
